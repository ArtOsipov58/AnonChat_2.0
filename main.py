import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import exceptions, executor
from aiopayok import Payok

import config
import kb
from states import RegState, AgeState, NameState, SexState, Chatting
from db import DB

db = DB()

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)
fh = logging.FileHandler("warning_log.log")
formatter = logging.Formatter('%(levelname)s - %(asctime)s - %(funcName)s: %(message)s (%(lineno)d)')
fh.setFormatter(formatter)
warning_log.addHandler(fh)

pay = Payok(api_id=config.API_ID, api_key=config.API_KEY, secret_key=config.SECRET_KEY, shop=config.SHOP_ID)


def top(word: str, list_top: list) -> str:
    st = ''
    for i in range(len(list_top)):
        st += f'{i + 1}) {list_top[i][0]} ‚Äî <b>{list_top[i][1]}</b> <i>{word}</i>\n'
    return st


# –ì–ª–∞–≤–Ω–∞—è ==============================================================================================================
@dp.message_handler(commands=['start'])
async def start(message):
    try:
        if not db.user_exists(message.from_user.id):
            sp = message.text.split()
            if len(sp) > 1:
                user_id = sp[1]
                db.update_refs(1, user_id)
                db.update_points(1, user_id)
                if bool(db.select_notifications(user_id)):
                    await bot.send_message(user_id, '–ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!')
                    if db.select_refs(user_id) % 10 == 0:
                        await bot.send_message(user_id, '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–∞—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.')
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n'
                                 f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                                 f'–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>–≤–∏–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n'
                                 f'–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n',
                                 reply_markup=kb.lobby_kb, parse_mode='HTML')
        else:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {db.select_name(message.from_user.id)}', reply_markup=kb.main_kb)
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'to_main', state='*')
async def call_start(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–ü—Ä–∏–≤–µ—Ç, {db.select_name(call.from_user.id)}', reply_markup=kb.main_kb)
    except Exception as e:
        warning_log.warning(e)


# –õ–æ–±–±–∏ ================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'lobby')
async def lobby(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n'
                                         f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                                         f'–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>–≤–∏–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n'
                                         f'–ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n',
                                    reply_markup=kb.lobby_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(commands=['help'])
async def help(message):
    try:
        await message.answer(f'/start - –í –Ω–∞—á–∞–ª–æ')
    except Exception as e:
        warning_log.warning(e)


# –ü—Ä–∞–≤–∏–ª–∞ ==============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'rules')
async def rules(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'<b>–í —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã:</b>\n'
                                         f'1) –õ—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ (–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤).\n'
                                         f'2) –û–±–º–µ–Ω, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö 18+ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n'
                                         f'3) –õ—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º, –ø—Ä–æ–¥–∞–∂–∞ —á–µ–≥–æ –ª–∏–±–æ.\n'
                                         f'4) –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n'
                                         f'5) –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n',
                                    reply_markup=kb.to_lobby_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ==========================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'registrate')
async def registrate(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')
        await RegState.name.set()
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(state=RegState.name)
async def reg_name(message, state):
    try:
        await state.update_data(name=message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.')
        await RegState.age.set()
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(state=RegState.age)
async def reg_age(message, state):
    try:
        await state.update_data(age=message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.', reply_markup=kb.sex_kb)
        await RegState.sex.set()
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data.endswith('male'), state=RegState.sex)
async def reg_sex(call, state):
    try:
        await call.answer()
        await state.update_data(sex=call.data)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í–∞–º –≤—ã–¥–∞–Ω –≤–∏–ø –Ω–∞ 7 –¥–Ω–µ–π.', reply_markup=kb.main_kb)
        data = await state.get_data()
        db.insert_in_users(data['name'], data['age'], data['sex'], call.from_user.id,
                           (datetime.now() + timedelta(days=7)).strftime('%d.%m.%Y %H:%M'))
        await state.finish()
    except Exception as e:
        warning_log.warning(e)


# –ü—Ä–æ—Ñ–∏–ª—å ==============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'profile')
async def profile(call):
    try:
        await call.answer()
        sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if db.select_sex(call.from_user.id) == 'male':
            sex = '–ú—É–∂—Å–∫–æ–π'
        elif db.select_sex(call.from_user.id) == 'female':
            sex = '–ñ–µ–Ω—Å–∫–∏–π'
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'üÖ∞Ô∏è <b>–ò–º—è:</b> <i>{db.select_name(call.from_user.id)}</i>\n'
                                         f'üîû <b>–í–æ–∑—Ä–∞—Å—Ç:</b> <i>{db.select_age(call.from_user.id)}</i>\n'
                                         f'üë´ <b>–ü–æ–ª:</b> <i>{sex}</i>',
                                    reply_markup=kb.profile_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'settings')
async def settings(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb.settings_kb)
    except Exception as e:
        warning_log.warning(e)


# –ò–º—è ==================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'name')
async def edit_name(call):
    try:
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.')
        await NameState.name.set()
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(state=NameState.name)
async def set_name(message, state):
    try:
        await state.update_data(name=message.text)
        data = await state.get_data()
        db.update_name(data['name'], message.from_user.id)
        await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.', reply_markup=kb.to_main_kb)
        await state.finish()
    except Exception as e:
        warning_log.warning(e)


# –í–æ–∑—Ä–∞—Å—Ç ==============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'age')
async def edit_age(call):
    try:
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.')
        await AgeState.age.set()
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(state=AgeState.age)
async def set_age(message, state):
    try:
        await state.update_data(age=message.text)
        data = await state.get_data()
        db.update_age(data['age'], message.from_user.id)
        await message.answer('–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
        await state.finish()
    except Exception as e:
        warning_log.warning(e)


# –ü–æ–ª ==================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'sex')
async def edit_sex(call):
    try:
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª.', reply_markup=kb.sex_kb)
        await SexState.sex.set()
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data.endswith('male'), state=SexState.sex)
async def set_sex(call, state):
    try:
        await call.answer()
        await state.update_data(sex=call.data)
        data = await state.get_data()
        db.update_sex(data['sex'], call.from_user.id)
        await bot.send_message(call.from_user.id, '–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
        await state.finish()
    except Exception as e:
        warning_log.warning(e)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===========================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'stats')
async def stats(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'üí¨ –ß–∞—Ç–æ–≤: {db.select_chats(call.from_user.id)}\n'
                                         f'‚å®Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π: {db.select_messages(call.from_user.id)}\n'
                                         f'üëç –õ–∞–π–∫–æ–≤: {db.select_likes(call.from_user.id)}\n'
                                         f'üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {db.select_dislikes(call.from_user.id)}\n'
                                         f'üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {db.select_refs(call.from_user.id)}',
                                    reply_markup=kb.statistic_kb)

    except Exception as e:
        warning_log.warning(e)


# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ ============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'ref')
async def ref(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å üíé.\n'
                                         f'1 –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ = 1 üíé.\n'
                                         f'5 üíé = 1 –¥–µ–Ω—å VIP-—Å—Ç–∞—Ç—É—Å–∞ üëë.\n'
                                         f'–£ –≤–∞—Å {db.select_points(call.from_user.id)} üíé.\n\n'
                                         f'üÜî –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                                         f'{f"{config.RETURN_URL}?start=" + str(call.from_user.id)}.',
                                    disable_web_page_preview=True,
                                    reply_markup=kb.ref_kb(db.select_notifications(call.from_user.id)))
    except Exception as e:
        warning_log.warning(e)


# –û–±–º–µ–Ω üíé =============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'trade')
async def trade(call):
    try:
        if db.select_points(call.from_user.id) >= 5:
            db.update_points(-5, call.from_user.id)
            if db.select_vip_ends(call.from_user.id) is None:
                db.update_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'),
                                   call.from_user.id)
                await call.answer('–£—Å–ø–µ—à–Ω–æ!')
            else:
                db.update_vip_ends((datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') +
                                    timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), call.from_user.id)
            await call.answer('–£—Å–ø–µ—à–Ω–æ!')
        else:
            await call.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤.')
    except Exception as e:
        warning_log.warning(e)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ==========================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'on')
async def notifications_on(call):
    try:
        await call.answer()
        db.update_notifications(1, call.from_user.id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.', reply_markup=kb.to_ref_kb)
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'off')
async def notifications_off(call):
    try:
        await call.answer()
        db.update_notifications(0, call.from_user.id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.', reply_markup=kb.to_ref_kb)
    except Exception as e:
        warning_log.warning(e)


# –¢–æ–ø—ã =================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'tops')
async def tops(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.', reply_markup=kb.top_kb)
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'top_messages')
async def top_messages(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=top('—Å–æ–æ–±—â–µ–Ω–∏–π', db.top_messages()), reply_markup=kb.to_tops_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'top_likes')
async def top_likes(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=top('–ª–∞–π–∫–æ–≤', db.top_likes()), reply_markup=kb.to_tops_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'top_refs')
async def top_refs(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=top('—Ä–µ—Ñ–æ–≤', db.top_refs()), reply_markup=kb.to_tops_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


# –í–∏–ø ==================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'vip')
async def vip(call):
    try:
        await call.answer()
        if db.select_vip_ends(call.from_user.id) is not None:
            if datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') > datetime.now():
                delta = datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') - datetime.now()
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                            text=f'–û—Å—Ç–∞–ª–æ—Å—å {delta.days} –¥–Ω–µ–π, {delta.seconds // 3600} —á–∞—Å–æ–≤, {delta.seconds // 60 % 60} –º–∏–Ω—É—Ç –í–∏–ø–∞.',
                                            reply_markup=kb.vip_kb)
            else:
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                            text=f'–í–∏–ø –¥–∞–µ—Ç:\n'
                                                 f'1) –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É.\n'
                                                 f'2) –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ: –æ—Ç–∑—ã–≤—ã, –∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Å—Ç—Ä–∞–Ω–∞...\n'
                                                 f'3) <b>–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏.</b>\n'
                                                 f'<i>–≠—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ, —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è</i>.',
                                            reply_markup=kb.vip_kb, parse_mode='HTML')
        else:
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        text=f'–í–∏–ø –¥–∞–µ—Ç:\n'
                                             f'1) –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É.\n'
                                             f'2) –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ: –æ—Ç–∑—ã–≤—ã, –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥\n'
                                             f'3) <b>–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏.</b>\n'
                                             f'<i>–≠—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ, —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è</i>.',
                                        reply_markup=kb.vip_kb, parse_mode='HTML')
    except Exception as e:
        warning_log.warning(e)


# –ö—É–ø–∏—Ç—å –≤–∏–ø ===========================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'buy_vip')
async def buy_vip(call):
    try:
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', reply_markup=kb.buy_kb)
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'vip_day')
async def buy_day(call):
    try:
        await call.answer()
        c = 0
        db.update_order_id(call.from_user.id)
        payment_id = f'{call.from_user.id}-{int(db.select_order_id(call.from_user.id)) + 1}'
        payments = await pay.create_pay(amount=20, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
                                        payment=payment_id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 20 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
        flag1 = False
        while not flag1:
            for i in [dict(i) for i in list(await pay.get_transactions())]:
                if i['payment_id'] == payment_id:
                    if c >= 3600:
                        flag1 = True
                        break
                    if i['transaction_status'] == 1:
                        await call.answer('–£—Å–ø–µ—à–Ω–æ')
                        if db.select_vip_ends(call.from_user.id) is None:
                            db.update_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'),
                                               call.from_user.id)
                        else:
                            db.update_vip_ends(
                                (datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') +
                                 timedelta(days=1)).strftime('%d.%m.%Y %H:%M'), call.from_user.id)
                        flag1 = True
                        break
                    else:
                        await asyncio.sleep(3)
                        c += 3
                else:
                    await asyncio.sleep(3)
                    c += 3
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'vip_week')
async def buy_week(call):
    try:
        await call.answer()
        c = 0
        db.update_order_id(call.from_user.id)
        payment_id = f'{call.from_user.id}-{int(db.select_order_id(call.from_user.id)) + 1}'
        payments = await pay.create_pay(amount=100, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
                                        payment=payment_id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 100 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
        flag1 = False
        while not flag1:
            for i in [dict(i) for i in list(await pay.get_transactions())]:
                if i['payment_id'] == payment_id:
                    if c >= 3600:
                        flag1 = True
                        break
                    if i['transaction_status'] == 1:
                        await call.answer('–£—Å–ø–µ—à–Ω–æ')
                        if db.select_vip_ends(call.from_user.id) is None:
                            db.update_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'),
                                               call.from_user.id)
                        else:
                            db.update_vip_ends(
                                (datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') +
                                 timedelta(days=7)).strftime('%d.%m.%Y %H:%M'), call.from_user.id)
                        flag1 = True
                        break
                    else:
                        await asyncio.sleep(3)
                        c += 3
                else:
                    await asyncio.sleep(3)
                    c += 3
    except Exception as e:
        warning_log.warning(e)


@dp.callback_query_handler(lambda call: call.data == 'vip_month')
async def buy_month(call):
    try:
        await call.answer()
        c = 0
        db.update_order_id(call.from_user.id)
        payment_id = f'{call.from_user.id}-{int(db.select_order_id(call.from_user.id)) + 1}'
        payments = await pay.create_pay(amount=300, currency='RUB', success_url=config.RETURN_URL, desc=payment_id,
                                        payment=payment_id)
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'<a href="{payments}">–û–ø–ª–∞—Ç–∏—Ç—å 300 —Ä—É–±–ª–µ–π</a>', parse_mode='HTML')
        flag1 = False
        while not flag1:
            for i in [dict(i) for i in list(await pay.get_transactions())]:
                if i['payment_id'] == payment_id:
                    if c >= 3600:
                        flag1 = True
                        break
                    if i['transaction_status'] == 1:
                        await call.answer('–£—Å–ø–µ—à–Ω–æ')
                        if db.select_vip_ends(call.from_user.id) is None:
                            db.update_vip_ends((datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y %H:%M'),
                                               call.from_user.id)
                        else:
                            db.update_vip_ends(
                                (datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') +
                                 timedelta(days=31)).strftime('%d.%m.%Y %H:%M'), call.from_user.id)
                        flag1 = True
                        break
                    else:
                        await asyncio.sleep(3)
                        c += 3
                else:
                    await asyncio.sleep(3)
                    c += 3
    except Exception as e:
        warning_log.warning(e)


# –ü–æ–∏—Å–∫ ================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'search', state='*')
async def search(call):
    try:
        await call.answer()
        db.insert_in_queue(call.from_user.id, db.select_sex(call.from_user.id))
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üîç', reply_markup=kb.cancel_search_kb)
        while True:
            await asyncio.sleep(1)
            if db.find_chat(call.from_user.id) is not None:
                db.update_connect_with(db.find_chat(call.from_user.id)[0], call.from_user.id)
                db.update_connect_with(call.from_user.id, db.find_chat(call.from_user.id)[0])
                break
        while True:
            await asyncio.sleep(1)
            if db.select_connect_with(call.from_user.id) is not None:
                db.delete_from_queue(call.from_user.id)
                db.delete_from_queue(db.select_connect_with(call.from_user.id))
                break
        await bot.send_message(call.from_user.id, '–ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ü•≥\n'
                                                  '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
        if datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') > datetime.now():
            sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            user_id = db.select_connect_with(call.from_user.id)
            if db.select_sex(user_id) == 'male':
                sex = '–ú—É–∂—Å–∫–æ–π'
            elif db.select_sex(user_id) == 'female':
                sex = '–ñ–µ–Ω—Å–∫–∏–π'
            await bot.send_message(call.from_user.id,
                                   f'üÖ∞Ô∏è –ò–º—è: {db.select_name(user_id)}\n'
                                   f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.select_age(user_id)}\n'
                                   f'üë´ –ü–æ–ª: {sex}\n'
                                   f'üëç: {db.select_likes(user_id)} üëé: {db.select_dislikes(user_id)}\n', )
        await Chatting.msg.set()
    except Exception as e:
        warning_log.warning(e)


# –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ =======================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'cancel_search')
async def cancel_search(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω üò•.',
                                    reply_markup=kb.main_kb)
        db.delete_from_queue(call.from_user.id)
    except Exception as e:
        warning_log.warning(e)


# –õ–∞–π–∫ =================================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'like', state='*')
async def like(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=kb.review_kb)
        db.update_likes(1, db.select_last_connect(call.from_user.id))
    except Exception as e:
        warning_log.warning(e)


# –î–∏–∑–ª–∞–π–∫ ==============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'dislike', state='*')
async def dislike(call):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=kb.review_kb)
        db.update_dislikes(1, db.select_last_connect(call.from_user.id))
    except Exception as e:
        warning_log.warning(e)


# –ü–æ–∏—Å–∫ ‚ôÇÔ∏è =============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'search_man')
async def search_man(call):
    try:
        await call.answer()
        if datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') > datetime.now():
            db.insert_in_queue_vip(call.from_user.id, db.select_sex(call.from_user.id), 'male')
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        text='–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üîç', reply_markup=kb.cancel_search_kb)
            while True:
                await asyncio.sleep(0.5)
                if db.find_chat_vip(call.from_user.id, db.select_sex(call.from_user.id), 'male') is not None:
                    db.update_connect_with(
                        db.find_chat_vip(call.from_user.id, db.select_sex(call.from_user.id), 'male'),
                        call.from_user.id)
                    db.update_connect_with(
                        call.from_user.id, db.find_chat_vip(call.from_user.id,
                                                            db.select_sex(call.from_user.id), 'male'))
                    break
            while True:
                await asyncio.sleep(0.5)
                if db.select_connect_with(call.from_user.id) is not None:
                    db.delete_from_queue(call.from_user.id)
                    db.delete_from_queue(db.select_connect_with(call.from_user.id))
                    break
            await bot.send_message(call.from_user.id, '–ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ü•≥\n'
                                                      '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
            await bot.send_message(db.select_connect_with(call.from_user.id), '–ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ü•≥\n'
                                                                              '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
            sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            user_id = db.select_connect_with(call.from_user.id)
            if db.select_sex(user_id) == 'male':
                sex = '–ú—É–∂—Å–∫–æ–π'
            elif db.select_sex(user_id) == 'female':
                sex = '–ñ–µ–Ω—Å–∫–∏–π'
            await bot.send_message(call.from_user.id,
                                   f'üÖ∞Ô∏è –ò–º—è: {db.select_name(user_id)}\n'
                                   f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.select_age(user_id)}\n'
                                   f'üë´ –ü–æ–ª: {sex}\n'
                                   f'üëç: {db.select_likes(user_id)} üëé: {db.select_dislikes(user_id)}\n')
            if datetime.strptime(db.select_vip_ends(db.select_connect_with(call.from_user.id)),
                                 '%d.%m.%Y %H:%M') > datetime.now():
                sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                user_id = call.from_user.id
                if db.select_sex(user_id) == 'male':
                    sex = '–ú—É–∂—Å–∫–æ–π'
                elif db.select_sex(user_id) == 'female':
                    sex = '–ñ–µ–Ω—Å–∫–∏–π'
                await bot.send_message(db.select_connect_with(call.from_user.id),
                                       f'üÖ∞Ô∏è –ò–º—è: {db.select_name(user_id)}\n'
                                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.select_age(user_id)}\n'
                                       f'üë´ –ü–æ–ª: {sex}\n'
                                       f'üëç: {db.select_likes(user_id)} üëé: {db.select_dislikes(user_id)}\n')
        else:
            await call.answer('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    except Exception as e:
        warning_log.warning(e)


# –ü–æ–∏—Å–∫ ‚ôÄÔ∏è =============================================================================================================
@dp.callback_query_handler(lambda call: call.data == 'search_woman')
async def search_woman(call):
    try:
        await call.answer()
        if datetime.strptime(db.select_vip_ends(call.from_user.id), '%d.%m.%Y %H:%M') > datetime.now():
            db.insert_in_queue_vip(call.from_user.id, db.select_sex(call.from_user.id), 'female')
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        text='–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... üîç', reply_markup=kb.cancel_search_kb)
            while True:
                await asyncio.sleep(0.5)
                if db.find_chat_vip(call.from_user.id, db.select_sex(call.from_user.id), 'female') is not None:
                    db.update_connect_with(
                        db.find_chat_vip(call.from_user.id, db.select_sex(call.from_user.id), 'female'),
                        call.from_user.id)
                    db.update_connect_with(
                        call.from_user.id, db.find_chat_vip(call.from_user.id,
                                                            db.select_sex(call.from_user.id), 'female'))
                    break
            while True:
                await asyncio.sleep(0.5)
                if db.select_connect_with(call.from_user.id) is not None:
                    db.delete_from_queue(call.from_user.id)
                    db.delete_from_queue(db.select_connect_with(call.from_user.id))
                    break
            await bot.send_message(call.from_user.id, '–ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ü•≥\n'
                                                      '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
            await bot.send_message(db.select_connect_with(call.from_user.id), '–ù–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ü•≥\n'
                                                                              '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
            sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            user_id = db.select_connect_with(call.from_user.id)
            if db.select_sex(user_id) == 'male':
                sex = '–ú—É–∂—Å–∫–æ–π'
            elif db.select_sex(user_id) == 'female':
                sex = '–ñ–µ–Ω—Å–∫–∏–π'
            await bot.send_message(call.from_user.id,
                                   f'üÖ∞Ô∏è –ò–º—è: {db.select_name(user_id)}\n'
                                   f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.select_age(user_id)}\n'
                                   f'üë´ –ü–æ–ª: {sex}\n'
                                   f'üëç: {db.select_likes(user_id)} üëé: {db.select_dislikes(user_id)}\n')
            if datetime.strptime(db.select_vip_ends(db.select_connect_with(call.from_user.id)),
                                 '%d.%m.%Y %H:%M') > datetime.now():
                sex = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                user_id = call.from_user.id
                if db.select_sex(user_id) == 'male':
                    sex = '–ú—É–∂—Å–∫–æ–π'
                elif db.select_sex(user_id) == 'female':
                    sex = '–ñ–µ–Ω—Å–∫–∏–π'
                await bot.send_message(db.select_connect_with(call.from_user.id),
                                       f'üÖ∞Ô∏è –ò–º—è: {db.select_name(user_id)}\n'
                                       f'üîû –í–æ–∑—Ä–∞—Å—Ç: {db.select_age(user_id)}\n'
                                       f'üë´ –ü–æ–ª: {sex}\n'
                                       f'üëç: {db.select_likes(user_id)} üëé: {db.select_dislikes(user_id)}\n')
        else:
            await call.answer('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    except Exception as e:
        warning_log.warning(e)


# –°—Å—ã–ª–∫–∞ ===============================================================================================================
@dp.message_handler(commands=['link'], state=Chatting.msg)
async def link(message):
    try:
        if message.from_user.username is None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞!')
        else:
            await bot.send_message(db.select_connect_with(message.from_user.id),
                                   f'–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}.')
            await message.answer('–Æ–∑–µ—Ä–Ω–µ–π–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    except Exception as e:
        warning_log.warning(e)


# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ ====================================================================================================
@dp.message_handler(commands=['stop'], state=Chatting.msg)
async def stop(message, state):
    try:
        await bot.send_message(message.from_user.id,
                               '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üòû\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∏–∂–µ.',
                               reply_markup=kb.search_kb)
        await bot.send_message(db.select_connect_with(message.from_user.id),
                               '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üòû\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∏–∂–µ.',
                               reply_markup=kb.search_kb)
        db.update_chats(1, db.select_connect_with(message.from_user.id))
        db.update_chats(1, message.from_user.id)
        db.update_last_connect(db.select_connect_with(message.from_user.id))
        db.update_last_connect(message.from_user.id)
        db.update_connect_with(None, db.select_connect_with(message.from_user.id))
        db.update_connect_with(None, message.from_user.id)
        await state.finish()
        op_state = dp.current_state(chat=db.select_connect_with(message.from_user.id), user=db.select_connect_with(message.from_user.id))
        await op_state.finish()
    except Exception as e:
        warning_log.warning(e)


# –û–±—â–µ–Ω–∏–µ ==============================================================================================================
@dp.message_handler(content_types=['text'], state=Chatting.msg)
async def chatting_text(message, state: FSMContext):
    try:
        await state.update_data(msg=message.text)
        user_data = await state.get_data()
        await bot.send_message(db.select_connect_with(message.from_user.id), user_data['msg'])
        db.insert_in_messages(message.from_user.id, user_data['msg'])
        db.update_messages(1, message.from_user.id)
    except exceptions.BotBlocked:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
    except Exception as e:
        warning_log.warning(e)


# –§–æ—Ç–æ =================================================================================================================
@dp.message_handler(content_types=['photo'], state=Chatting.msg)
async def chatting_photo(message, state: FSMContext):
    try:
        await state.update_data(photo=message.photo[-1].file_id)
        user_data = await state.get_data()
        await bot.send_photo(db.select_connect_with(message.from_user.id), user_data['photo'])
    except Exception as e:
        warning_log.warning(e)


# –í–∏–¥–µ–æ ================================================================================================================
@dp.message_handler(content_types=['video'], state=Chatting.msg)
async def chatting_video(message, state: FSMContext):
    try:
        await state.update_data(video=message.video.file_id)
        user_data = await state.get_data()
        await bot.send_video(db.select_connect_with(message.from_user.id), user_data['video'])
    except Exception as e:
        warning_log.warning(e)


# –ì–∏—Ñ ==================================================================================================================
@dp.message_handler(content_types=['animation'], state=Chatting.msg)
async def chatting_animation(message, state: FSMContext):
    try:
        await state.update_data(animation=message.animation.file_id)
        user_data = await state.get_data()
        await bot.send_animation(db.select_connect_with(message.from_user.id), user_data['animation'])
    except Exception as e:
        warning_log.warning(e)


# –°—Ç–∏–∫–µ—Ä ===============================================================================================================
@dp.message_handler(content_types=['sticker'], state=Chatting.msg)
async def chatting_sticker(message, state: FSMContext):
    try:
        await state.update_data(sticker=message.sticker.file_id)
        user_data = await state.get_data()
        await bot.send_sticker(db.select_connect_with(message.from_user.id), user_data['sticker'])
    except Exception as e:
        warning_log.warning(e)


# –î–æ–∫—É–º–µ–Ω—Ç =============================================================================================================
@dp.message_handler(content_types=['document'], state=Chatting.msg)
async def chatting_document(message, state: FSMContext):
    try:
        await state.update_data(document=message.document.file_id)
        user_data = await state.get_data()
        await bot.send_document(db.select_connect_with(message.from_user.id), user_data['document'])
    except Exception as e:
        warning_log.warning(e)


# –ê—É–¥–∏–æ ================================================================================================================
@dp.message_handler(content_types=['audio'], state=Chatting.msg)
async def chatting_audio(message, state: FSMContext):
    try:
        await state.update_data(audio=message.audio.file_id)
        user_data = await state.get_data()
        await bot.send_audio(db.select_connect_with(message.from_user.id), user_data['audio'])
    except Exception as e:
        warning_log.warning(e)


# –ì—Å ===================================================================================================================
@dp.message_handler(content_types=['voice'], state=Chatting.msg)
async def chatting_voice(message, state: FSMContext):
    try:
        await state.update_data(voice=message.voice.file_id)
        user_data = await state.get_data()
        await bot.send_voice(db.select_connect_with(message.from_user.id), user_data['voice'])
    except Exception as e:
        warning_log.warning(e)


# –ö—Ä—É–∂–æ–∫ ===============================================================================================================
@dp.message_handler(content_types=['video_note'], state=Chatting.msg)
async def chatting_video_note(message, state: FSMContext):
    try:
        await state.update_data(video_note=message.video_note.file_id)
        user_data = await state.get_data()
        await bot.send_video_note(db.select_connect_with(message.from_user.id), user_data['video_note'])
    except Exception as e:
        warning_log.warning(e)


# –û—Å—Ç–∞–ª—å–Ω–æ–µ ===============================================================================================================
@dp.message_handler(content_types=['unknown'], state=Chatting.msg)
async def chatting_unknown(message):
    try:
        await message.answer('–≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è üò¢.')
    except Exception as e:
        warning_log.warning(e)


if __name__ == '__main__':
    print('–†–∞–±–æ—Ç–∞–µ–ºüëå')
    executor.start_polling(dp, skip_updates=False)
